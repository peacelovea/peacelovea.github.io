(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{372:function(s,a,e){"use strict";e.r(a);var n=e(7),t=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"javascript-中的类型转换机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-中的类型转换机制"}},[s._v("#")]),s._v(" JavaScript 中的类型转换机制")]),s._v(" "),a("p",[s._v("JS中有七种简单数据类型：undefined、null、boolean、string、number、bigInt、symbol，以及引用类型：object")]),s._v(" "),a("p",[s._v("但是我们在声明的时候只有一种数据类型，只有到运行期间才会确定当前类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let x = y ? 1 : a;\n\n//上面代码中，x的值在编译阶段是无法获取的，只有等到程序运行时才能知道\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("创建变量时的数据类型是不确定的，但是各种运算符对数据类型是有要求的，如果运算子的类型不符合预期，就会触发类型转换机制")]),s._v(" "),a("p",[s._v("常见的类型转换有：")]),s._v(" "),a("ul",[a("li",[s._v("强制转换(显示)")]),s._v(" "),a("li",[s._v("自动转换(隐式)")])]),s._v(" "),a("h3",{attrs:{id:"一-显示转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-显示转换"}},[s._v("#")]),s._v(" 一.显示转换")]),s._v(" "),a("p",[s._v("显示转换，即我们很清楚可以看到这里发生了类型的转变，常见的方法有：")]),s._v(" "),a("ul",[a("li",[s._v("Number()")]),s._v(" "),a("li",[s._v("parseInt()")]),s._v(" "),a("li",[s._v("String()")]),s._v(" "),a("li",[s._v("Boolean()")])]),s._v(" "),a("h4",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[s._v("#")]),s._v(" Number()")]),s._v(" "),a("p",[s._v("将任意类型的值转化为数值")]),s._v(" "),a("p",[a("code",[s._v("Number")]),s._v("转换的时候是很严格的，只要有一个字符无法转成数值，整个字符串就会被转为"),a("code",[s._v("NaN")])]),s._v(" "),a("p",[s._v("类型转换规则：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a02fd8a907d44138e87af7e959715d4~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"}})]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Number(324) // 324\n\n// 字符串：如果可以被解析为数值，则转换为相应的数值\nNumber('324') // 324\n\n// 字符串：如果不可以被解析为数值，返回 NaN\nNumber('324abc') // NaN\n\n// 空字符串转为0\nNumber('') // 0\n\n// 布尔值：true 转成 1，false 转成 0\nNumber(true) // 1\nNumber(false) // 0\n\n// undefined：转成 NaN\nNumber(undefined) // NaN\n\n// null：转成0\nNumber(null) // 0\n\n// 对象：通常转换成NaN(除了只包含单个数值的数组)\nNumber({a: 1}) // NaN\nNumber([1, 2, 3]) // NaN\nNumber([5]) // 5\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("h4",{attrs:{id:"parseint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parseint"}},[s._v("#")]),s._v(" parseInt()")]),s._v(" "),a("p",[a("code",[s._v("parseInt")]),s._v("相比"),a("code",[s._v("Number")]),s._v("，就没那么严格了，"),a("code",[s._v("parseInt")]),s._v("函数逐个解析字符，遇到不能转换的字符就停下来")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("parseInt('32a3') //32\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" String()")]),s._v(" "),a("p",[s._v("可以将任意类型的值转化成字符串")]),s._v(" "),a("p",[s._v("给出转换规则图：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fbc57e8c8cfb451f82275b0206150e33~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"}})]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 数值：转为相应的字符串\nString(1) // "1"\n\n//字符串：转换后还是原来的值\nString("a") // "a"\n\n//布尔值：true转为字符串"true"，false转为字符串"false"\nString(true) // "true"\n\n//undefined：转为字符串"undefined"\nString(undefined) // "undefined"\n\n//null：转为字符串"null"\nString(null) // "null"\n\n//对象\nString({a: 1}) // "[object Object]"\nString([1, 2, 3]) // "1,2,3"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h4",{attrs:{id:"boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[s._v("#")]),s._v(" Boolean()")]),s._v(" "),a("p",[s._v("可以将任意类型的值转为布尔值，转换规则如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f68b99788c744f1ac1a138c01430cf0~tplv-k3u1fbpfcp-zoom-1.image",alt:"img"}})]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Boolean(undefined) // false\nBoolean(null) // false\nBoolean(0) // false\nBoolean(NaN) // false\nBoolean('') // false\nBoolean({}) // true\nBoolean([]) // true\nBoolean(new Boolean(false)) // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"二-隐式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-隐式转换"}},[s._v("#")]),s._v(" 二.隐式转换")]),s._v(" "),a("p",[s._v("何时发生隐式转换？")]),s._v(" "),a("p",[s._v("可以归纳为两种情况发生隐式转换的场景：")]),s._v(" "),a("ul",[a("li",[s._v("比较运算（"),a("code",[s._v("==")]),s._v("、"),a("code",[s._v("!=")]),s._v("、"),a("code",[s._v(">")]),s._v("、"),a("code",[s._v("<")]),s._v("),"),a("code",[s._v("if")]),s._v(","),a("code",[s._v("while")]),s._v("等需要布尔值的地方")]),s._v(" "),a("li",[s._v("算数运算（"),a("code",[s._v("+")]),s._v("、"),a("code",[s._v("-")]),s._v("、"),a("code",[s._v("*")]),s._v("、"),a("code",[s._v("/")]),s._v("、"),a("code",[s._v("%")]),s._v("）")])]),s._v(" "),a("p",[s._v("除了上面的场景，还要求运算符两边的操作数不是同一类型")]),s._v(" "),a("h4",{attrs:{id:"自动转换为布尔值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动转换为布尔值"}},[s._v("#")]),s._v(" 自动转换为布尔值")]),s._v(" "),a("p",[s._v("在需要布尔值的地方，就会将非布尔值的参数自动转为布尔值，系统内部会调用"),a("code",[s._v("Boolean")]),s._v("函数")]),s._v(" "),a("p",[s._v("记住：")]),s._v(" "),a("ul",[a("li",[s._v("undefined")]),s._v(" "),a("li",[s._v("null")]),s._v(" "),a("li",[s._v("false")]),s._v(" "),a("li",[s._v("+0")]),s._v(" "),a("li",[s._v("-0")]),s._v(" "),a("li",[s._v("NaN")]),s._v(" "),a("li",[s._v("空字符串")])]),s._v(" "),a("p",[s._v("除了以上会转为false，其余都转换为true")]),s._v(" "),a("h4",{attrs:{id:"自动转换成字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动转换成字符串"}},[s._v("#")]),s._v(" 自动转换成字符串")]),s._v(" "),a("p",[s._v("遇到预期为字符串的地方，就会将非字符串的值自动转为字符串")]),s._v(" "),a("p",[s._v("具体的转换规则是：先将复合类型的值转为原始类型的值，再将原始类型的值转为字符串")]),s._v(" "),a("p",[s._v("常发生在"),a("code",[s._v("+")]),s._v("运算中，一旦存在字符串，则会进行字符串拼接操作")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("'5' + 1 // '51'\n'5' + true // \"5true\"\n'5' + false // \"5false\"\n'5' + {} // \"5[object Object]\"\n'5' + [] // \"5\"\n'5' + function (){} // \"5function (){}\"\n'5' + undefined // \"5undefined\"\n'5' + null // \"5null\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h4",{attrs:{id:"自动转换成数值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动转换成数值"}},[s._v("#")]),s._v(" 自动转换成数值")]),s._v(" "),a("p",[s._v("除了"),a("code",[s._v("+")]),s._v("有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("'5' - '2' // 3\n'5' * '2' // 10\ntrue - 1  // 0\nfalse - 1 // -1\n'1' - 1   // 0\n'5' * []    // 0\nfalse / '5' // 0\n'abc' - 1   // NaN\nnull + 1 // 1\nundefined + 1 // NaN\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("null转为数值时，值为0 。undefined转为数值时，值为NaN")]),s._v(" "),a("h2",{attrs:{id:"和-区别-分别在什么情况使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和-区别-分别在什么情况使用"}},[s._v("#")]),s._v(" == 和 ===区别，分别在什么情况使用")]),s._v(" "),a("h3",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[s._v("#")]),s._v(" ==运算符")]),s._v(" "),a("p",[s._v("等于操作符用两个等于号（ == ）表示，如果操作数相等，则会返回 "),a("code",[s._v("true")])]),s._v(" "),a("p",[a("code",[s._v("JavaScript")]),s._v("中存在隐式转换。等于操作符（==）在比较中会先进行类型转换，再确定操作数是否相等")]),s._v(" "),a("p",[s._v("遵循以下规则：")]),s._v(" "),a("p",[s._v("如果任一操作数是布尔值，则将其转换为数值再比较是否相等")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let result1 = (true == 1); // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否相等")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let result1 = ("55" == 55); // true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果一个操作数是对象，另一个操作数不是，则调用对象的 "),a("code",[s._v("valueOf()")]),s._v("方法取得其原始值，进行比较，如果得到的还是对象，则再调用"),a("code",[s._v("toString()")]),s._v("方法，得到字符串形式，再进行比较。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let obj = {valueOf:function(){return 1}}\nlet result1 = (obj == 1); // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("null和undefined相等")]),s._v(" "),a("code",[s._v("undefined")]),s._v("和"),a("code",[s._v("null")]),s._v("只有与自身比较，或者互相比较时，才会返回"),a("code",[s._v("true")]),s._v("；与其他类型的值比较时，结果都为"),a("code",[s._v("false")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("undefined == undefined // true\nnull == null // true\nundefined == null // true\n\nfalse == null // false\nfalse == undefined // false\n\n0 == null // false\n0 == undefined // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("如果有任一操作数是 "),a("code",[s._v("NaN")]),s._v(" ，则相等操作符返回 "),a("code",[s._v("false")]),s._v("（NaN）包括自己")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let result1 = (NaN == NaN ); // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回"),a("code",[s._v("true")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let obj1 = {name:"xxx"}\nlet obj2 = {name:"xxx"}\nlet result1 = (obj1 == obj2 ); // false\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("下面进一步做个小结：")]),s._v(" "),a("ul",[a("li",[s._v("两个都为简单数据类型，字符串和布尔值都会转换为数值，再进行比较")]),s._v(" "),a("li",[s._v("简单数据类型于引用数据类型比较，对象转化为原始类型的值，再比较")]),s._v(" "),a("li",[s._v("两个都为引用类型，比较地址")]),s._v(" "),a("li",[s._v("null == undefined")]),s._v(" "),a("li",[s._v("存在NaN 则返回false 包括自己")])]),s._v(" "),a("h3",{attrs:{id:"运算符-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符-2"}},[s._v("#")]),s._v(" ===运算符")]),s._v(" "),a("p",[s._v("全等操作符由 3 个等于号（ === ）表示，只有两个操作数在不转换的前提下相等才返回 "),a("code",[s._v("true")]),s._v("。即类型相同，值也需相同")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let result1 = ("55" === 55); // false，不相等，因为数据类型不同\nlet result2 = (55 === 55); // true，相等，因为数据类型相同值也相同\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("code",[s._v("undefined")]),s._v(" 和 "),a("code",[s._v("null")]),s._v(" 与自身严格相等")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let result1 = (null === null)  //true\nlet result2 = (undefined === undefined)  //true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("NaN === NaN fasle")]),s._v(" "),a("p",[s._v("两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个地址。")]),s._v(" "),a("p",[s._v("注意，对于两个对象的比较，严格相等运算符比较的是地址，而大于或小于运算符比较的是值。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj1 = {};\nvar obj2 = {};\n\nobj1 > obj2 // false\nobj1 < obj2 // false\nobj1 === obj2 // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[s._v("#")]),s._v(" 区别")]),s._v(" "),a("ul",[a("li",[s._v("相等操作符（==）会做类型转换，再进行值的比较，全等运算符不会做类型转换")]),s._v(" "),a("li",[s._v("null 和 undefined 比较，相等操作符（==）为true，全等为false")])]),s._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("相等运算符隐藏的类型转换，会带来一些违反直觉的结果")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("'' == '0' // false\n0 == '' // true\n0 == '0' // true\n\nfalse == 'false' // false\nfalse == '0' // true\n\nfalse == undefined // false\nfalse == null // false\nnull == undefined // true\n\n' \\t\\r\\n' == 0 // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("但在比较"),a("code",[s._v("null")]),s._v("的情况的时候，我们一般使用相等操作符"),a("code",[s._v("==")]),s._v("，因为null == undefined，使用相等操作符（==）的写法明显更加简洁了")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const obj = {};\n\nif(obj.x == null){\n  console.log("1");  //执行\n}\n\n//等同于\nif(obj.x === null || obj.x === undefined) {\n    ...\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("所以，除了在比较对象属性为null或undefined时候，使用相等操作符（==），其他情况建议一律使用全等操作符（===）")])])}),[],!1,null,null,null);a.default=t.exports}}]);