(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{374:function(v,_,t){"use strict";t.r(_);var e=t(7),a=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"搞懂浏览器缓存机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#搞懂浏览器缓存机制"}},[v._v("#")]),v._v(" 搞懂浏览器缓存机制")]),v._v(" "),_("p",[v._v("前端人员在开发时，如果页面没有按照自己的预期展示，可能首先想到就是清理缓存重新加载，而http缓存是提高性能的重要手段，所以Web开发人员有必要搞懂缓存机制。")]),v._v(" "),_("p",[v._v("浏览器/http缓存机制，是根据http报文的缓存标识运行的，所以首先要对http报文有一个简单认识")]),v._v(" "),_("h2",{attrs:{id:"http报文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http报文"}},[v._v("#")]),v._v(" http报文")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("http")]),v._v("报文包括："),_("strong",[v._v("请求报文")]),v._v("和"),_("strong",[v._v("响应报文")]),v._v("。")]),v._v(" "),_("li",[v._v("每个报文包含什么部分。")]),v._v(" "),_("li",[v._v("每个部分的内容是什么")])]),v._v(" "),_("p",[v._v("请求报文包括：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://s.poetries.work/gitee/2020/07/35.png",alt:"img"}})]),v._v(" "),_("ul",[_("li",[v._v("请求行：包括请求方法、请求的url、http协议以及版本")]),v._v(" "),_("li",[v._v("请求头：键值对")]),v._v(" "),_("li",[v._v("空行：当服务器解析请求头时，如果遇到了空行则表明后面的内容是请求体")]),v._v(" "),_("li",[v._v("请求体：数据部分")])]),v._v(" "),_("p",[v._v("响应报文包括：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://s.poetries.work/gitee/2020/07/36.png",alt:"img"}})]),v._v(" "),_("ul",[_("li",[v._v("状态行：http协议以及版本、状态码及描述")]),v._v(" "),_("li",[v._v("响应头")]),v._v(" "),_("li",[v._v("空行")]),v._v(" "),_("li",[v._v("响应体")])]),v._v(" "),_("blockquote",[_("p",[v._v("与缓存有关的规则信息都包含在请求头和响应头中")])]),v._v(" "),_("h2",{attrs:{id:"缓存概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存概述"}},[v._v("#")]),v._v(" 缓存概述")]),v._v(" "),_("p",[v._v("浏览器与服务器通过请求-响应模型来通信，当浏览器第一次向服务器发送请求并拿到结果后，会根据响应报文中的缓存规则来决定是否缓存结果")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://uploadfiles.nowcoder.com/images/20210320/5114437_1616244737185/DE19A3898D4920055070B54FE76383EF",alt:"图片说明"}})]),v._v(" "),_("p",[v._v("浏览器每次发送请求都会先在浏览器中查找该请求的结果和缓存标识(通过请求头)，每次获取到响应结果后都会将该结果和缓存标识存入缓存中。")]),v._v(" "),_("p",[v._v("http缓存分为强缓存和协商缓存，两者的区别是强缓存不会像服务器发送请求，而协商缓存会重新向服务器发起请求。")]),v._v(" "),_("h2",{attrs:{id:"缓存机制的流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存机制的流程"}},[v._v("#")]),v._v(" 缓存机制的流程")]),v._v(" "),_("ol",[_("li",[v._v("浏览器发送请求前，根据请求头的"),_("code",[v._v("expires")]),v._v("和"),_("code",[v._v("cache-control")]),v._v("字段判断是否命中(过期)强缓存。如果命中，直接从缓存中获取资源，并不会发送请求；如果没有命中进入下一步")]),v._v(" "),_("li",[v._v("没有命中强缓存，浏览器会发送请求，根据请求头的last-modified和etage判断是否命中协商缓存，如果命中返回304，直接从缓存中获取资源；")]),v._v(" "),_("li",[v._v("都没有命中，则从服务端获取资源")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-28160195deb51a7ff988ce0e6fe47996_720w.webp",alt:"img"}})]),v._v(" "),_("h2",{attrs:{id:"强缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[v._v("#")]),v._v(" 强缓存")]),v._v(" "),_("p",[v._v("强制缓存的情况主要有三种(暂不分析协商缓存过程)，如下：")]),v._v(" "),_("ul",[_("li",[v._v("存在所需缓存并且未失效：则强缓存生效，直接走本地缓存")]),v._v(" "),_("li",[v._v("存在所需缓存但已失效：强缓存失效，使用协商缓存，浏览器携带缓存标识发起http请求")]),v._v(" "),_("li",[v._v("不存在所需缓存：强缓存失效，直接向服务器发起 HTTP 请求")])]),v._v(" "),_("p",[v._v("控制强缓存的字段分别是"),_("code",[v._v("Expires")]),v._v("和"),_("code",[v._v("Cache-Control")]),v._v("，"),_("code",[v._v("Cache-Control")]),v._v("优先级高于"),_("code",[v._v("Expires")])]),v._v(" "),_("h3",{attrs:{id:"expires"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[v._v("#")]),v._v(" Expires")]),v._v(" "),_("p",[_("code",[v._v("Expires")]),v._v("是 HTTP/1.0 控制网页缓存的字段，用来指定资源到期的时间，是服务器端的具体时间点，需要和"),_("code",[v._v("last-modified")]),v._v("结合使用。"),_("code",[v._v("Expires")]),v._v("是Web服务器响应消息字段，在响应http请求的时候告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求")]),v._v(" "),_("blockquote",[_("p",[v._v("Expires 是 HTTP/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效。")])]),v._v(" "),_("h3",{attrs:{id:"cache-control"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[v._v("#")]),v._v(" Cache-Control")]),v._v(" "),_("p",[_("code",[v._v("Cache-Control")]),v._v("是 HTTP/1.1 中最重要的规则，主要取值为：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("取值")]),v._v(" "),_("th",[v._v("规则")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[_("code",[v._v("public")])]),v._v(" "),_("td",[v._v("所有内容都可以被缓存，包括客户端和代理服务器，纯前端可认为与"),_("code",[v._v("private")]),v._v("一样。")])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("private")])]),v._v(" "),_("td",[v._v("所有内容只有客户端可以缓存，"),_("code",[v._v("Cache-Control")]),v._v("的默认值。")])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("no-cache")])]),v._v(" "),_("td",[v._v("客户端可以缓存，但是是否缓存需要与服务器协商决定（协商缓存）")])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("no-store")])]),v._v(" "),_("td",[v._v("所有内容都不会被缓存，既不是用强制缓存，也不使用协商缓存，为了速度快，实际上缓存越多越好，所以这个慎用")])]),v._v(" "),_("tr",[_("td",[_("code",[v._v("max-age=xxx")])]),v._v(" "),_("td",[v._v("缓存内容将在 xxx 秒后失效")])])])]),v._v(" "),_("p",[_("code",[v._v("Expires")]),v._v("是一个绝对值，而"),_("code",[v._v("Cache-Control")]),v._v("是一个相对值，"),_("code",[v._v("max-age=3600")]),v._v("，即 1 小时后失效。在无法确定客户端的时间是否与服务端的时间同步的情况下，"),_("code",[v._v("Cache-Control")]),v._v("相比于"),_("code",[v._v("Expires")]),v._v("是更好的选择，所以同时存在时只有"),_("code",[v._v("Cache-Control")]),v._v("生效。")]),v._v(" "),_("h2",{attrs:{id:"协商缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[v._v("#")]),v._v(" 协商缓存")]),v._v(" "),_("p",[v._v("协商缓存就是强缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存。")]),v._v(" "),_("ul",[_("li",[v._v("协商缓存生效：返回304和Not Modified")]),v._v(" "),_("li",[v._v("协商缓存不生效：返回200，向服务器请求结果")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-29af290eabb00d70fb015eeeccf16666_720w.webp",alt:"img"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-1683bb59b2f2dbc33cddb93de7acf791_720w.webp",alt:"img"}})]),v._v(" "),_("p",[v._v("控制协商缓存的字段有：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("Last-Modified/If-Modified-Since")]),v._v(" "),_("ul",[_("li",[v._v("浏览器首先发送一个请求：让服务端在"),_("code",[v._v("response header")]),v._v("中返回请求的资源上次更新时间，就是"),_("code",[v._v("last-modified")]),v._v("，浏览器会缓存下这个时间。")]),v._v(" "),_("li",[v._v("浏览器在下次请求中，"),_("code",[v._v("request header")]),v._v("中带上"),_("code",[v._v("if-modified-since")]),v._v(":"),_("code",[v._v("[保存的last-modified的值]")]),v._v("。根据浏览器发送的修改时间和服务端的修改时间进行比对，一致的话代表资源没有改变，服务端返回正文为空的响应，让浏览器中缓存中读取资源，这就大大减小了请求的消耗。")])])]),v._v(" "),_("li",[_("p",[v._v("Etag/If-None-Match：优先级高")]),v._v(" "),_("ul",[_("li",[v._v("Etage是服务器响应请求时，返回当前资源文件的一个由服务器生成的唯一标识")]),v._v(" "),_("li",[v._v("和last-modified一样，浏览器会先发送一个请求得到"),_("code",[v._v("etag")]),v._v("的值，然后在下一次请求时，在请求头中带上"),_("code",[v._v("if-none-matchif-none-match")]),v._v(":"),_("code",[v._v("[保存的etag的值]")])]),v._v(" "),_("li",[v._v("通过请求头的"),_("code",[v._v("etag")]),v._v("和服务端重新生成的值进行对比，如果一致代表资源没有改变，服务端返回正文为空的响应，告诉浏览器从缓存中读取资源。")]),v._v(" "),_("li",[v._v("etag每次服务端生成都需要进行读写操作，而last-modified只需要读取操作，从这方面来看，etag的消耗是更大的。")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("精确度上："),_("code",[v._v("Etag")]),v._v("要优于"),_("code",[v._v("Last-Modified")]),v._v("。")]),v._v(" "),_("p",[v._v("优先级上：服务器校验优先考虑"),_("code",[v._v("Etag")]),v._v("。")]),v._v(" "),_("p",[v._v("性能上："),_("code",[v._v("Etag")]),v._v("要逊于"),_("code",[v._v("Last-Modified")])])])])}),[],!1,null,null,null);_.default=a.exports}}]);