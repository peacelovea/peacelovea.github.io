(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{375:function(e,s,t){"use strict";t.r(s);var a=t(7),r=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"websocket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[e._v("#")]),e._v(" WebSocket")]),e._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),s("p",[s("code",[e._v("WebSocket")]),e._v("是一种网络传输协议，位于应用层。可以在单个"),s("code",[e._v("tcp")]),e._v("连接上进行全双工通信。能更好的节省资源和带宽，并达到实时通讯的目的")]),e._v(" "),s("blockquote",[s("p",[s("code",[e._v("WebSocket")]),e._v("是一个持久化的网络通信协议，可以在单个 TCP 连接上进行 "),s("strong",[e._v("全双工通讯")]),e._v(" ，没有了 "),s("strong",[e._v("Request")]),e._v(" 和 "),s("strong",[e._v("Response")]),e._v(" 的概念，两者地位完全平等，连接一旦建立，客户端和服务端之间可以实时进行双向数据传输。")])]),e._v(" "),s("p",[e._v("客户端和服务器只需要完成一次握手，就可以创建持久性的连接，并进行双向数据传输，客户端和服务端都能主动发送消息或接收数据。")]),e._v(" "),s("p",[e._v("在webSocket出现之前，开发实时"),s("code",[e._v("web")]),e._v("应用的方式为轮询，不停地向服务器发送 HTTP 请求，问有没有数据，有数据的话服务器就用响应报文回应。如果轮询的频率比较高，那么就可以近似地实现“实时通信”的效果。轮询的去点很明显，就是反复发送请求耗费了大量的带块和cpu资源。")]),e._v(" "),s("h2",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[e._v("#")]),e._v(" 特点")]),e._v(" "),s("h3",{attrs:{id:"全双工通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全双工通信"}},[e._v("#")]),e._v(" 全双工通信")]),e._v(" "),s("p",[e._v("通信允许数据在两个方向上同时传输，它在能力上相当于两个单工通信方式的结合")]),e._v(" "),s("p",[e._v("例如指 A→B 的同时 B→A ，是瞬时同步的")]),e._v(" "),s("h3",{attrs:{id:"二进制帧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制帧"}},[e._v("#")]),e._v(" 二进制帧")]),e._v(" "),s("p",[e._v("采用了二进制帧结构，但语法与 HTTP 完全不兼容。相比"),s("code",[e._v("http/2")]),e._v("，"),s("code",[e._v("WebSocket")]),e._v("更侧重于“实时通信”，而"),s("code",[e._v("HTTP/2")]),e._v(" 更侧重于提高传输效率，所以两者的帧结构也有很大的区别。")]),e._v(" "),s("p",[e._v("不像http2那样定义流，也就不存在多路复用、优先级等特性")]),e._v(" "),s("p",[e._v("本身就是全双工，也不需要服务器推送")]),e._v(" "),s("h3",{attrs:{id:"协议名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协议名"}},[e._v("#")]),e._v(" 协议名")]),e._v(" "),s("p",[e._v("引入"),s("code",[e._v("ws")]),e._v("和"),s("code",[e._v("wss")]),e._v("分别代表明文和密文的"),s("code",[e._v("websocket")]),e._v("协议，默认端口使用80或443")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("ws://www.chrono.com\nws://www.chrono.com:8080/srv\nwss://www.chrono.com:445/im?user_id=xxx\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#握手"}},[e._v("#")]),e._v(" 握手")]),e._v(" "),s("p",[s("code",[e._v("websocket")]),e._v("也要有一个握手的过程，然后才能正式收发数据。")]),e._v(" "),s("p",[e._v("WebSocket 虽然是独立于 HTTP 的一种协议，但是 WebSocket必须依赖http协议进行一次握手，握手成功后，数据就直接从 TCP 通道传输，与 HTTP 无关了")]),e._v(" "),s("p",[e._v("客户端发送报文")]),e._v(" "),s("div",{staticClass:"language-http line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token request-line"}},[s("span",{pre:!0,attrs:{class:"token method property"}},[e._v("GET")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token request-target url"}},[e._v("/chat")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token http-version property"}},[e._v("HTTP/1.1")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Host")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("server.example.com")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Upgrade")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("websocket")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Connection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("Upgrade")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Sec-WebSocket-Key")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("dGhlIHNhbXBsZSBub25jZQ==")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Origin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("http://example.com")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Sec-WebSocket-Protocol")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("chat, superchat")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Sec-WebSocket-Version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("13")])]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("ul",[s("li",[e._v("Connection：设置为Upgrade表示协议升级")]),e._v(" "),s("li",[e._v("Upgrade：必须设置websocket，表示升级为websocket协议")]),e._v(" "),s("li",[e._v("Sec-WebSocket-Key：客户端发送的一个base64编码的密文，用于简单的认证密钥。要求服务端必须返回一个对应的Sec-WebSocket-Accept应答，否则客户端会抛错，并关闭连接；是由浏览器随机生成的，验证是否可以进行 WebSocket 通信，防止恶意或者无意的连接；")]),e._v(" "),s("li",[e._v("Sec-WebSocket-Version ：表示支持的Websocket版本")])]),e._v(" "),s("p",[e._v("服务端返回的数据格式")]),e._v(" "),s("div",{staticClass:"language-http line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-http"}},[s("code",[s("span",{pre:!0,attrs:{class:"token response-status"}},[s("span",{pre:!0,attrs:{class:"token http-version property"}},[e._v("HTTP/1.1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token status-code number"}},[e._v("101")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token reason-phrase string"}},[e._v("Switching Protocols")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Upgrade")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("websocket")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Connection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("Upgrade")])]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token header"}},[s("span",{pre:!0,attrs:{class:"token header-name keyword"}},[e._v("Sec-WebSocket-Accept")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token header-value"}},[e._v("s3pPLMBiTxaQ9kYGzzhZRbK+xOo=Sec-WebSocket-Protocol: chat")])]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("ul",[s("li",[e._v("HTTP/1.1 101 Switching Protocols：表示服务端接受 WebSocket 协议的客户端连接")]),e._v(" "),s("li",[e._v("Sec-WebSocket-Accep：验证客户端请求报文，同样也是为了防止误连接。具体做法是把请求头里“Sec-WebSocket-Key”的值，加上一个专用的 UUID，再计算摘要")])]),e._v(" "),s("h3",{attrs:{id:"websocket和http有什么不一样"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#websocket和http有什么不一样"}},[e._v("#")]),e._v(" websocket和HTTP有什么不一样")]),e._v(" "),s("ul",[s("li",[e._v("较少的控制开销：数据包头部协议较小，不同于http每次请求需要携带完整的头部")]),e._v(" "),s("li",[e._v("更强的实时性：相对于HTTP请求需要等待客户端发起请求服务端才能响应，延迟明显更少")]),e._v(" "),s("li",[e._v("保持创连接状态：创建通信后，可省略状态信息，不同于HTTP每次请求需要携带身份验证")]),e._v(" "),s("li",[e._v("更好的二进制支持：定义了二进制帧，更好处理二进制内容")]),e._v(" "),s("li",[e._v("支持扩展：用户可以扩展websocket协议、实现部分自定义的子协议")]),e._v(" "),s("li",[e._v("更好的压缩效果：Websocket在适当的扩展支持下，可以沿用之前内容的上下文，在传递类似的数据时，可以显著地提高压缩率")]),e._v(" "),s("li",[e._v("没有同源限制，客户端可以与任意服务器通信")]),e._v(" "),s("li",[e._v("与 "),s("code",[e._v("HTTP")]),e._v(" 协议有着良好的兼容性。默认端口也是"),s("code",[e._v("80")]),e._v("和"),s("code",[e._v("443")]),e._v("，并且握手阶段采用 "),s("code",[e._v("HTTP")]),e._v(" 协议，因此握手时不容易屏蔽，能通过各种 "),s("code",[e._v("HTTP")]),e._v(" 代理服务器")])]),e._v(" "),s("p",[e._v("基于"),s("code",[e._v("websocket")]),e._v("的事实通信的特点，其存在的应用场景大概有：")]),e._v(" "),s("ul",[s("li",[e._v("弹幕")]),e._v(" "),s("li",[e._v("媒体聊天")]),e._v(" "),s("li",[e._v("协同编辑")]),e._v(" "),s("li",[e._v("基于位置的应用")])])])}),[],!1,null,null,null);s.default=r.exports}}]);